version: "3.8"

services:

  # pgsql:
  #   image: postgres:latest
  #   container_name: postgres
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: vbnb
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - app_network

  # pgsql-test:
  #   image: postgres:latest
  #   container_name: postgres-test
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: vbnb-test
  #   ports:
  #     - "5433:5432"
  #   networks:
  #     - app_network

  springapi:
    # depends_on:
    #   - pgsql
    build:
      context: ./backend/vbnb
      dockerfile: Dockerfile
    container_name: spring-boot-api-container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOSTNAME: ${POSTGRES_HOSTNAME}
      POSTGRES_DBNAME: ${POSTGRES_DBNAME}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ALLOWED_ORIGINS_HEADERS: ${ALLOWED_ORIGINS_HEADERS}
    ports:
      - "8080:8080"
    networks:
      - app_network

  reactfrontend:
    depends_on:
      - springapi
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react-frontend-container
    environment:
      BACKEND_URL: ${BACKEND_URL}
      CLOUDINARY_UPLOAD_PRESET: ${CLOUDINARY_UPLOAD_PRESET}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
    ports:
      - "5173:5173"
    networks:
      - app_network

networks:
  app_network:
    name: app_network
